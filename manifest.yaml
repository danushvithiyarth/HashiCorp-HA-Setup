apiVersion: apps/v1
kind: Deployment
metadata:
  name: bankapp
  namespace: webapp
spec:
  replicas: 2
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: bankapp
  template:
    metadata:
      labels:
        app: bankapp
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "vault-role"

        # Inject SPRING_DATASOURCE_URL
        vault.hashicorp.com/agent-inject-secret-spring-datasource-url: "secret/frontend"
        vault.hashicorp.com/agent-inject-template-spring-datasource-url: |
          {{- with secret "secret/frontend" -}}
          export SPRING_DATASOURCE_URL="{{.Data.data.SPRING_DATASOURCE_URL}}"
          {{- end}}

        # Inject SPRING_DATASOURCE_USERNAME
        vault.hashicorp.com/agent-inject-secret-spring-datasource-username: "secret/frontend"
        vault.hashicorp.com/agent-inject-template-spring-datasource-username: |
          {{- with secret "secret/frontend" -}}
          export SPRING_DATASOURCE_USERNAME="{{.Data.data.SPRING_DATASOURCE_USERNAME}}"
          {{- end}}

        # Inject SPRING_DATASOURCE_PASSWORD
        vault.hashicorp.com/agent-inject-secret-spring-datasource-password: "secret/frontend"
        vault.hashicorp.com/agent-inject-template-spring-datasource-password: |
          {{- with secret "secret/frontend" -}}
          export SPRING_DATASOURCE_PASSWORD="{{.Data.data.SPRING_DATASOURCE_PASSWORD}}"
          {{- end}}
    spec:
      serviceAccountName: vault-auth
      containers:
      - name: bankapp
        image: adijaiswal/bankapp:v4
        ports:
        - containerPort: 8080
        command:
          ["/bin/sh", "-c"]
        args:
          [
            "source /vault/secrets/spring-datasource-url && \
             source /vault/secrets/spring-datasource-username && \
             source /vault/secrets/spring-datasource-password && \
             java -jar /usr/src/app/app.jar"
          ]

---

apiVersion: v1
kind: Service
metadata:
  name: bankapp-service
  namespace: webapp
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: bankapp

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: webapp
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "vault-role"

        # Inject MYSQL_ROOT_PASSWORD
        vault.hashicorp.com/agent-inject-secret-mysql-root-password: "secret/mysql"
        vault.hashicorp.com/agent-inject-template-mysql-root-password: |
          {{- with secret "secret/mysql" -}}
          export MYSQL_ROOT_PASSWORD="{{.Data.data.MYSQL_ROOT_PASSWORD}}"
          {{- end}}

        # Inject MYSQL_DATABASE
        vault.hashicorp.com/agent-inject-secret-mysql-database: "secret/mysql"
        vault.hashicorp.com/agent-inject-template-mysql-database: |
          {{- with secret "secret/mysql" -}}
          export MYSQL_DATABASE="{{.Data.data.MYSQL_DATABASE}}"
          {{- end}}

    spec:
      serviceAccountName: vault-auth
      containers:
      - name: mysql
        image: mysql:8
        ports:
        - containerPort: 3306
          name: mysql
        command: ["/bin/sh", "-c"]
        args:
          [
            "source /vault/secrets/mysql-root-password && \
             source /vault/secrets/mysql-database && \
             exec docker-entrypoint.sh mysqld"
          ]
---

apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: webapp
spec:
  type: ClusterIP
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: mysql
